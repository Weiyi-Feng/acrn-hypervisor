{
	"$schema": "http://json-schema.org/draft-07/schema",
	"type": "object",
	"required": [
		"acrn-config"
	],
	"properties": {
		"acrn-config": {
			"$ref": "#/definitions/ACRNConfigType"
		}
	},
	"additionalProperties": true,
	"definitions": {
		"Boolean": {
			"type": "string",
			"enum": [
				"y",
				"n"
			]
		},
		"EnablementType": {
			"type": "string",
			"enum": [
				"Enable",
				"Disable"
			]
		},
		"HexFormat": {
			"type": "string",
			"pattern": "^0[Xx][0-9A-Fa-f]+|0$"
		},
		"None": {
			"type": "string",
			"pattern": "^[*]{0}$"
		},
		"BuildType": {
			"type": "string",
			"enum": [
				"release",
				"debug"
			]
		},
		"KernLoadAddr": {
			"anyOf": [
				{
					"title": "None",
					"type": "string",
					"pattern": "^[*]{0}$"
				},
				{
					"title": "HexFormat",
					"type": "string",
					"pattern": "^0[Xx][0-9A-Fa-f]+|0$"
				}
			]
		},
		"KernEntryAddr": {
			"anyOf": [
				{
					"title": "None",
					"type": "string",
					"pattern": "^[*]{0}$"
				},
				{
					"title": "HexFormat",
					"type": "string",
					"pattern": "^0[Xx][0-9A-Fa-f]+|0$"
				}
			]
		},
		"MaxMsixTableNumType": {
			"type": "integer",
			"minimum": 1,
			"maximum": 2048
		},
		"MaxMsixTableSizeType": {
			"anyOf": [
				{
					"title": "None",
					"type": "string",
					"pattern": "^[*]{0}$"
				},
				{
					"title": "MaxMsixTableNumType",
					"type": "integer",
					"minimum": 1,
					"maximum": 2048
				}
			]
		},
		"MemorySizeType": {
			"anyOf": [
				{
					"title": "HexFormat",
					"type": "string",
					"pattern": "^0[Xx][0-9A-Fa-f]+|0$"
				}
			]
		},
		"LogLevelType": {
			"type": "string",
			"enum": [
				"0: None",
				"1: Critical",
				"2: Error",
				"3: Warning",
				"4: Information",
				"5: Debug"
			]
		},
		"SchedulerType": {
			"type": "string",
			"enum": [
				"SCHED_NOOP",
				"SCHED_IORR",
				"SCHED_BVT",
				"SCHED_PRIO"
			]
		},
		"PriorityType": {
			"type": "string",
			"enum": [
				"PRIO_LOW",
				"PRIO_HIGH"
			]
		},
		"SerialConsoleType": {
			"type": "string",
			"pattern": "^.*ttyS[\\d]+$"
		},
		"SerialConsoleOptions": {
			"anyOf": [
				{
					"title": "None",
					"type": "string",
					"pattern": "^[*]{0}$"
				},
				{
					"title": "SerialConsoleType",
					"type": "string",
					"pattern": "^.*ttyS[\\d]+$"
				}
			]
		},
		"VMNameType": {
			"type": "string",
			"pattern": "^([a-zA-Z0-9_\\-]){1,15}$"
		},
		"VBDFType": {
			"type": "string",
			"pattern": "^[0-9A-Fa-f]{1,2}:[0-1][0-9A-Fa-f].[0-7]$"
		},
		"ProviderType": {
			"type": "string",
			"enum": [
				"Hypervisor",
				"Device model"
			]
		},
		"IVSHMEMSize": {
			"type": "integer",
			"enum": [
				2,
				4,
				8,
				16,
				32,
				64,
				128,
				256,
				512
			]
		},
		"LoadOrderType": {
			"type": "string",
			"enum": [
				"SERVICE_VM",
				"PRE_LAUNCHED_VM",
				"POST_LAUNCHED_VM"
			]
		},
		"VMType": {
			"type": "string",
			"enum": [
				"RTVM",
				"STANDARD_VM",
				"TEE_VM",
				"REE_VM"
			]
		},
		"VMKernelType": {
			"type": "string",
			"enum": [
				"KERNEL_BZIMAGE",
				"KERNEL_RAWIMAGE",
				"KERNEL_ELF"
			]
		},
		"ConsoleVuartConfiguration": {
			"type": "string",
			"enum": [
				"None",
				"COM Port 1",
				"COM Port 2",
				"COM Port 3",
				"COM Port 4",
				"PCI"
			]
		},
		"VuartType": {
			"type": "string",
			"enum": [
				"legacy",
				"pci"
			]
		},
		"OSType": {
			"type": "string",
			"enum": [
				"Non-Windows OS",
				"Windows OS"
			]
		},
		"BasicVMType": {
			"type": "string",
			"enum": [
				"RTVM",
				"STANDARD_VM"
			]
		},
		"IVSHMEMVM": {
			"type": "object",
			"required": [
				"VM_NAME",
				"VBDF"
			],
			"properties": {
				"VM_NAME": {
					"$ref": "#/definitions/VMNameType",
					"title": "VM_NAME",
					"description": "<div class=\"document\">\n <p>\n  Name of the VM which use this IVSHMEM.\n </p>\n</div>\n"
				},
				"VBDF": {
					"$ref": "#/definitions/VBDFType",
					"title": "VBDF",
					"description": "<div class=\"document\">\n <p>\n  Bus, Device and function of the virtual\ndevice in VM . Set in hex.\n </p>\n</div>\n"
				}
			}
		},
		"IVSHMEMVMS": {
			"type": "object",
			"required": [
				"IVSHMEM_VM"
			],
			"properties": {
				"IVSHMEM_VM": {
					"items": {
						"$ref": "#/definitions/IVSHMEMVM"
					},
					"type": "array",
					"title": "IVSHMEM_VM",
					"description": "<div class=\"document\">\n <p>\n  Set each VM which use this IVSHMEM.\n </p>\n</div>\n"
				}
			}
		},
		"IVSHMEMRegionType": {
			"type": "object",
			"required": [
				"NAME",
				"PROVIDED_BY",
				"IVSHMEM_SIZE",
				"IVSHMEM_VMS"
			],
			"properties": {
				"NAME": {
					"type": "string",
					"pattern": "^\\w+$",
					"title": "Name",
					"description": "<div class=\"document\">\n <p>\n  Name of the shared memory region.\n </p>\n</div>\n"
				},
				"PROVIDED_BY": {
					"$ref": "#/definitions/ProviderType",
					"default": "Hypervisor",
					"title": "Emulated by",
					"description": "<div class=\"document\">\n <p>\n  Whether the shared memory region is provided by the hypervisor or device model.\n </p>\n</div>\n"
				},
				"IVSHMEM_SIZE": {
					"$ref": "#/definitions/IVSHMEMSize",
					"default": 2,
					"title": "Size",
					"description": "<div class=\"document\">\n <p>\n  Memory size of inter-VM shared memory (IVSHMEM)\nin megabytes. The value should be a power of 2\nand no more than 512.\n </p>\n</div>\n"
				},
				"IVSHMEM_VMS": {
					"$ref": "#/definitions/IVSHMEMVMS",
					"title": "Shared VMs",
					"description": "<div class=\"document\">\n <p>\n  Set all VMs which use this IVSHMEM.\n </p>\n</div>\n"
				}
			}
		},
		"IVSHMEMInfo": {
			"type": "object",
			"properties": {
				"IVSHMEM_REGION": {
					"items": {
						"$ref": "#/definitions/IVSHMEMRegionType"
					},
					"type": "array",
					"title": "IVSHMEM_REGION",
					"description": "<div class=\"document\">\n <p>\n  Set a inter-VM shared memory.\n </p>\n</div>\n"
				}
			}
		},
		"RDTType": {
			"type": "object",
			"required": [
				"RDT_ENABLED",
				"CDP_ENABLED",
				"VCAT_ENABLED"
			],
			"properties": {
				"RDT_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Intel Resource Director Technology",
					"description": "<div class=\"document\">\n <p>\n  Enable the Intel Resource Director Technology (RDT)\nallocation feature. If the board hardware does not support\nRDT, setting this option to\n  <span class=\"docutils literal\">\n   y\n  </span>\n  is ignored.\n </p>\n</div>\n"
				},
				"CDP_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Code and Data Prioritization",
					"description": "<div class=\"document\">\n <p>\n  Specify whether to enable Code and Data Prioritization (CDP).\nCDP is an extension of CAT. Set to 'y' to enable the feature or 'n' to disable it.\nThe 'y' will be ignored when hardware does not support CDP.\n </p>\n</div>\n"
				},
				"VCAT_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "VCAT_ENABLED",
					"description": "<div class=\"document\">\n <p>\n  Specify whether to enable CAT virtualization (vCAT).\nSet to 'y' to enable the feature or 'n' to disable it.\nThe 'y' will be ignored when hardware does not support CAT.\n </p>\n</div>\n"
				},
				"CLOS_MASK": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"title": "CLOS_MASK",
					"description": "<div class=\"document\">\n <p>\n  Specify the cache capacity bitmask for the CLOS; only continuous '1' bits\nare allowed. The value will be ignored when hardware does not support RDT.\nThis option takes effect only if\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/reference/config-options.html#cmdoption-arg-hv.FEATURES.RDT.RDT_ENABLED\" target=\"_blank\">\n   hv.FEATURES.RDT.RDT_ENABLED\n  </a>\n  is set to\n  <span class=\"docutils literal\">\n   y\n  </span>\n  .\nAs\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/reference/config-options.html#cmdoption-arg-vm.clos.vcpu_clos\" target=\"_blank\">\n   vm.clos.vcpu_clos\n  </a>\n  specifies the index of the CLOS to be associated with the given vCPU,\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/reference/config-options.html#cmdoption-arg-hv.FEATURES.RDT.CLOS_MASK\" target=\"_blank\">\n   hv.FEATURES.RDT.CLOS_MASK\n  </a>\n  of that CLOS would impact the performance of the given vCPU.\n </p>\n</div>\n"
				},
				"MBA_DELAY": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"title": "MBA_DELAY",
					"description": "<div class=\"document\">\n <p>\n  Memory Bandwidth Allocation delay value.\n </p>\n</div>\n"
				}
			}
		},
		"SSRAMInfo": {
			"type": "object",
			"required": [
				"SSRAM_ENABLED"
			],
			"properties": {
				"SSRAM_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Software SRAM (for real-time apps)",
					"description": "<div class=\"document\">\n <p>\n  Enable the Software SRAM feature for real-time VMs. This feature reserves memory buffers as always-cached memory for improved VM performance.\n </p>\n</div>\n"
				}
			}
		},
		"CPUAffinityConfiguration": {
			"type": "object",
			"required": [
				"pcpu_id"
			],
			"properties": {
				"pcpu_id": {
					"type": "array",
					"items": {
						"type": "integer",
						"default": 2
					},
					"title": "pcpu_id",
					"description": "<div class=\"document\">\n <p>\n  A pCPU that this VM's vCPU is allowed to pin\nto.\n </p>\n</div>\n"
				}
			}
		},
		"CLOSConfiguration": {
			"type": "object",
			"required": [
				"vcpu_clos"
			],
			"properties": {
				"vcpu_clos": {
					"type": "array",
					"items": {
						"type": "integer",
						"default": 0
					},
					"title": "vcpu_clos",
					"description": "<div class=\"document\">\n <p>\n  By default (\n  <span class=\"docutils literal\">\n   virtual_cat_support\n  </span>\n  is not specified):\nvcpu_clos is per-CPU and it configures each CPU in VMs to a desired CLOS ID in the\n  <span class=\"docutils literal\">\n   VM\n  </span>\n  section of the\nscenario file. Follow\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/tutorials/rdt_configuration.html#rdt-detection-capabilities\" target=\"_blank\">\n   RDT Detection and Resource Capabilities\n  </a>\n  to identify the maximum supported CLOS ID that can be used.\n </p>\n <p>\n  If\n  <span class=\"docutils literal\">\n   virtual_cat_support\n  </span>\n  is specified:\nvcpu_clos is not per-CPU anymore, just a list of physical CLOSIDs (minimum 2) that are assigned to VMs\nfor vCAT use. Each vcpu_clos will be mapped to a virtual CLOSID, the first vcpu_clos is mapped to virtual\nCLOSID 0 and the second is mapped to virtual CLOSID 1, etc.\n </p>\n</div>\n"
				}
			}
		},
		"EPCSection": {
			"type": "object",
			"required": [
				"base",
				"size"
			],
			"properties": {
				"base": {
					"$ref": "#/definitions/HexFormat",
					"default": 0,
					"title": "base",
					"description": "<div class=\"document\">\n <p>\n  Specify SGX EPC section base, must be page aligned. (Default value is 0)\n </p>\n</div>\n"
				},
				"size": {
					"$ref": "#/definitions/HexFormat",
					"default": 0,
					"title": "size",
					"description": "<div class=\"document\">\n <p>\n  Specify SGX EPC section size in Bytes, must be page aligned. (Default value is 0)\n </p>\n</div>\n"
				}
			}
		},
		"MemoryInfo": {
			"type": "object",
			"required": [
				"whole",
				"start_hpa"
			],
			"properties": {
				"whole": {
					"type": "integer",
					"default": 256,
					"title": "VM physical memory allocation (MB)",
					"description": "<div class=\"document\">\n <p>\n  Specify the physical memory allocated to this VM in Megabytes.\n </p>\n</div>\n"
				},
				"start_hpa": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x100000000",
					"title": "start_hpa",
					"description": "<div class=\"document\">\n <p>\n  The starting physical address in host for the VM.\n </p>\n</div>\n"
				},
				"size": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x20000000",
					"title": "size",
					"description": "<div class=\"document\">\n <p>\n  The memory size in bytes for the VM. Default value is\n  <span class=\"docutils literal\">\n   0x200000000\n  </span>\n  .\n </p>\n</div>\n"
				},
				"start_hpa2": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x0",
					"title": "start_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Start of second HPA for non-contiguous allocations in host for the VM.\n </p>\n</div>\n"
				},
				"size_hpa2": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x0",
					"title": "size_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Memory size of second HPA for non-contiguous allocations in Bytes for the VM.\n </p>\n</div>\n"
				}
			}
		},
		"OSConfigurations": {
			"type": "object",
			"required": [
				"kern_type",
				"kern_mod"
			],
			"properties": {
				"kern_type": {
					"$ref": "#/definitions/VMKernelType",
					"title": "Kernel image type",
					"description": "<div class=\"document\">\n <p>\n  Specify the kernel image type so the hypervisor can load it correctly.\n </p>\n</div>\n"
				},
				"kern_mod": {
					"type": "string",
					"title": "Kernel module tag",
					"description": "<div class=\"document\">\n <p>\n  Enter the tag for the kernel image that is used as a multiboot module. It must exactly match the module tag in the GRUB multiboot cmdline.\n </p>\n</div>\n"
				},
				"ramdisk_mod": {
					"type": "string",
					"title": "RAMdisk module tag",
					"description": "<div class=\"document\">\n <p>\n  Specify the tag for the ramdisk image that is used as a multiboot module. It must exactly match the module tag in the GRUB multiboot cmdline.\n </p>\n</div>\n"
				},
				"bootargs": {
					"type": "string",
					"title": "Kernel boot arguments",
					"description": "<div class=\"document\">\n <p>\n  Specify configurable boot argument for pre-launched or Service VM.\n </p>\n</div>\n"
				},
				"kern_load_addr": {
					"$ref": "#/definitions/KernLoadAddr",
					"title": "kern_load_addr",
					"description": "<div class=\"document\">\n <p>\n  The loading address in host memory for the VM kernel.\n </p>\n</div>\n"
				},
				"kern_entry_addr": {
					"$ref": "#/definitions/KernEntryAddr",
					"title": "kern_entry_addr",
					"description": "<div class=\"document\">\n <p>\n  The entry address in host memory for the VM kernel.\n </p>\n</div>\n"
				}
			}
		},
		"VuartEndpointType": {
			"type": "object",
			"required": [
				"vm_name",
				"io_port"
			],
			"properties": {
				"vm_name": {
					"type": "string"
				},
				"io_port": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x3F"
				},
				"vbdf": {
					"items": {
						"$ref": "#/definitions/VBDFType"
					},
					"type": "array",
					"maxItems": 1
				}
			}
		},
		"VuartConnectionType": {
			"type": "object",
			"required": [
				"name",
				"type",
				"endpoint"
			],
			"properties": {
				"name": {
					"type": "string"
				},
				"type": {
					"$ref": "#/definitions/VuartType",
					"default": "legacy"
				},
				"endpoint": {
					"minItems": 2,
					"items": {
						"$ref": "#/definitions/VuartEndpointType"
					},
					"type": "array",
					"maxItems": 2
				}
			}
		},
		"VuartConnectionsType": {
			"type": "object",
			"properties": {
				"vuart_connection": {
					"items": {
						"$ref": "#/definitions/VuartConnectionType"
					},
					"type": "array"
				}
			}
		},
		"MMIOResourcesConfiguration": {
			"type": "object",
			"properties": {
				"TPM2": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Trusted Platform Module passthrough",
					"description": "<div class=\"document\">\n <p>\n  Passthrough the Trusted Platform Module (TPM2) device to this VM. (Optional) (Default value is n)\n </p>\n</div>\n"
				},
				"p2sb": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Primary-to-Sideband bridge passthrough",
					"description": "<div class=\"document\">\n <p>\n  Passthrough the P2SB (Primary-to-Sideband) bridge register access BAR to the this VM. (Optional) (Default value is n)\n </p>\n</div>\n"
				}
			}
		},
		"PCIDevsConfiguration": {
			"type": "object",
			"properties": {
				"pci_dev": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"title": "PCI device assignment",
					"description": "<div class=\"document\">\n <p>\n  Select the PCI devices you want to assign to this virtual machine.\n </p>\n</div>\n"
				}
			}
		},
		"DebugOptionsType": {
			"type": "object",
			"required": [
				"BUILD_TYPE",
				"SERIAL_CONSOLE",
				"MEM_LOGLEVEL",
				"NPK_LOGLEVEL",
				"CONSOLE_LOGLEVEL"
			],
			"properties": {
				"BUILD_TYPE": {
					"$ref": "#/definitions/BuildType",
					"default": "debug",
					"title": "Build type",
					"description": "<div class=\"document\">\n <p>\n  Identify build type.  Debug mode enables debug shell, prints, and logs.  Release mode optimizes the ACRN binary for deployment and turns off all debug infrastructure.  These can only be changed at build time.\n </p>\n</div>\n"
				},
				"SERIAL_CONSOLE": {
					"$ref": "#/definitions/SerialConsoleOptions",
					"title": "Serial console port",
					"description": "<div class=\"document\">\n <p>\n  Specify the host serial device used for hypervisor debugging.\n </p>\n</div>\n"
				},
				"MEM_LOGLEVEL": {
					"$ref": "#/definitions/LogLevelType",
					"default": "0: None",
					"title": "ACRN log level",
					"description": "<div class=\"document\">\n <p>\n  Specify default log level for log messages stored in memory. Value can be changed at runtime.  Log messages with the selected value or lower are displayed.\n </p>\n</div>\n"
				},
				"NPK_LOGLEVEL": {
					"$ref": "#/definitions/LogLevelType",
					"default": "0: None",
					"title": "Intel Trace Hub log level",
					"description": "<div class=\"document\">\n <p>\n  Specify default log level for the hypervisor via Intel Trace Hub log.  Use the Intel Trace Hub's memory to record log messages.  Value can be changed at runtime.   Log messages with the selected value or lower are displayed.\n </p>\n</div>\n"
				},
				"CONSOLE_LOGLEVEL": {
					"$ref": "#/definitions/LogLevelType",
					"default": "0: None",
					"title": "Serial console log level",
					"description": "<div class=\"document\">\n <p>\n  Specify default log level for log messages written to the serial console.  Log messages with the selected value or lower are displayed.\n </p>\n</div>\n"
				}
			}
		},
		"FeatureOptionsType": {
			"type": "object",
			"required": [
				"RELOC",
				"SCHEDULER",
				"MULTIBOOT2",
				"ENFORCE_TURNOFF_AC",
				"ENFORCE_TURNOFF_GP",
				"SECURITY_VM_FIXUP",
				"KEEP_IRQ_DISABLED",
				"RDT",
				"HYPERV_ENABLED",
				"IOMMU_ENFORCE_SNP",
				"ACPI_PARSE_ENABLED",
				"L1D_VMENTRY_ENABLED",
				"MCE_ON_PSC_DISABLED",
				"IVSHMEM"
			],
			"properties": {
				"RELOC": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Hypervisor relocation in memory",
					"description": "<div class=\"document\">\n <p>\n  Enable hypervisor relocation in memory.  The boot loader may need to change the location of the hypervisor because of other firmware.\n </p>\n</div>\n"
				},
				"SCHEDULER": {
					"$ref": "#/definitions/SchedulerType",
					"default": "SCHED_BVT",
					"title": "Scheduler and workload prioritization",
					"description": "<div class=\"document\">\n <p>\n  Choose scheduling algorithm used for determining which User VM runs on a shared virtual CPU.\n </p>\n</div>\n"
				},
				"MULTIBOOT2": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Enable Multiboot2",
					"description": "<div class=\"document\">\n <p>\n  Enable multiboot2 boot protocol support and multiboot1 downward compatibility.  Disable this feature if multiboot1 meets your requirements and to reduce lines of code.\n </p>\n</div>\n"
				},
				"ENFORCE_TURNOFF_AC": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Split lock detection",
					"description": "<div class=\"document\">\n <p>\n  Enable split lock detection for real-time application. This prevents alignment check exceptions from impacting hypervisor real-time performance.\n </p>\n</div>\n"
				},
				"ENFORCE_TURNOFF_GP": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Prevent system bus locking",
					"description": "<div class=\"document\">\n <p>\n  Enable UC lock detection for real-time application. This prevents general protection faults from impacting hypervisor real-time performance.\n </p>\n</div>\n"
				},
				"SECURITY_VM_FIXUP": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "SECURITY_VM_FIXUP",
					"description": "<div class=\"document\">\n <p>\n  Enable to do fixup for TPM2 and SMBIOS for Security VM. If no Security VM, setting this option to\n  <span class=\"docutils literal\">\n   n\n  </span>\n </p>\n</div>\n"
				},
				"KEEP_IRQ_DISABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "KEEP_IRQ_DISABLED",
					"description": "<div class=\"document\">\n <p>\n  If\n  <span class=\"docutils literal\">\n   y\n  </span>\n  , permanently disables all interrupts in HV root mode.\n </p>\n</div>\n"
				},
				"RDT": {
					"$ref": "#/definitions/RDTType",
					"title": "Intel Resource Director Technology",
					"description": "<div class=\"document\">\n <p>\n  Enable Intel Resource Director Technology (RDT). The technology provides cache and memory allocation features to improve time performance of real-time VMs.\n </p>\n</div>\n"
				},
				"HYPERV_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "TLFS support for Windows",
					"description": "<div class=\"document\">\n <p>\n  Enable Microsoft(R) Hypervisor Top-Level Functional Specification for Windows hyper-v support.\n </p>\n</div>\n"
				},
				"IOMMU_ENFORCE_SNP": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "IOMMU_ENFORCE_SNP",
					"description": "<div class=\"document\">\n <p>\n  Specify if the IOMMU enforces snoop behavior of DMA operations.\n </p>\n</div>\n"
				},
				"ACPI_PARSE_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Parse ACPI tables at runtime",
					"description": "<div class=\"document\">\n <p>\n  Enable ACPI runtime parsing to get DMAR (DMA remapping) configuration data from the APCI tables. Otherwise, use existing, static information from the associated board.xml file.\n </p>\n</div>\n"
				},
				"L1D_VMENTRY_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Mitigate L1 terminal fault",
					"description": "<div class=\"document\">\n <p>\n  Enable L1 cache flush before VM entry,Determine the enabling of mitigation solution for L1 Terminal Fault (L1TF). The L1 data cache will be flushed before each VMENTRY.L1TF is a speculative execution side channel cache timing vulnerability. Each variety of L1TF could potentially allow unauthorized disclosure of information residing in the L1 data cache.\n </p>\n</div>\n"
				},
				"MCE_ON_PSC_DISABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "MCE workaround",
					"description": "<div class=\"document\">\n <p>\n  Enable software workaround for Machine Check Error on Page Size Change (silicon bug in some processor families).\n </p>\n</div>\n"
				},
				"IVSHMEM": {
					"$ref": "#/definitions/IVSHMEMInfo",
					"title": "Inter-VM shared memory",
					"description": ""
				},
				"SSRAM": {
					"$ref": "#/definitions/SSRAMInfo",
					"title": "Software SRAM (for real-time apps)",
					"description": ""
				}
			}
		},
		"MemoryOptionsType": {
			"type": "object",
			"required": [
				"STACK_SIZE",
				"HV_RAM_START"
			],
			"properties": {
				"STACK_SIZE": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x2000",
					"title": "Stack size (in byte)",
					"description": "<div class=\"document\">\n <p>\n  Capacity of one stack (in bytes) used by a physical core. Each core uses one stack for normal operation and another three for specific exceptions.\n </p>\n</div>\n"
				},
				"HV_RAM_START": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x00400000",
					"title": "HV_RAM_START",
					"description": "<div class=\"document\">\n <p>\n  The 2MB-aligned starting physical address of the RAM region used by the hypervisor.\n </p>\n</div>\n"
				}
			}
		},
		"CapacitiesOptionsType": {
			"type": "object",
			"required": [
				"MAX_VM_NUM",
				"IOMMU_BUS_NUM",
				"MAX_IOAPIC_NUM",
				"MAX_PCI_DEV_NUM",
				"MAX_IOAPIC_LINES",
				"MAX_PT_IRQ_ENTRIES",
				"MAX_MSIX_TABLE_NUM",
				"MAX_EMULATED_MMIO"
			],
			"properties": {
				"MAX_VM_NUM": {
					"type": "integer",
					"default": 16,
					"title": "MAX_VM_NUM",
					"description": "<div class=\"document\">\n <p>\n  Maximum number of User VMs allowed.\n </p>\n</div>\n"
				},
				"IOMMU_BUS_NUM": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x100",
					"title": "IOMMU_BUS_NUM",
					"description": "<div class=\"document\">\n <p>\n  Highest PCI bus ID used during IOMMU initialization.\n </p>\n</div>\n"
				},
				"MAX_IOAPIC_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 10,
					"default": 1,
					"title": "MAX_IOAPIC_NUM",
					"description": "<div class=\"document\">\n <p>\n  Maximum number of IOAPICs.\n </p>\n</div>\n"
				},
				"MAX_PCI_DEV_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 1024,
					"default": 96,
					"title": "Maximum number of PCI devices",
					"description": "<div class=\"document\">\n <p>\n  Specify the static memory allocation of maximum number of PCI devices. (Default value is 96)\n </p>\n</div>\n"
				},
				"MAX_IOAPIC_LINES": {
					"type": "integer",
					"minimum": 1,
					"maximum": 120,
					"default": 120,
					"title": "MAX_IOAPIC_LINES",
					"description": "<div class=\"document\">\n <p>\n  Maximum number of interrupt lines per IOAPIC.\n </p>\n</div>\n"
				},
				"MAX_PT_IRQ_ENTRIES": {
					"type": "integer",
					"default": 256,
					"title": "MAX_PT_IRQ_ENTRIES",
					"description": "<div class=\"document\">\n <p>\n  The pre-defined number of interrupt sources of all pass-through devices.\n </p>\n</div>\n"
				},
				"MAX_MSIX_TABLE_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 2048,
					"default": 64,
					"title": "MAX_MSIX_TABLE_NUM",
					"description": "<div class=\"document\">\n <p>\n  Specify maximum number of MSI-X tables per device. If this value is empty, then the default value will be calculated from the board XML file. (Default value is 64)\n </p>\n</div>\n"
				},
				"MAX_EMULATED_MMIO": {
					"type": "integer",
					"minimum": 1,
					"maximum": 128,
					"default": 16,
					"title": "MAX_EMULATED_MMIO",
					"description": "<div class=\"document\">\n <p>\n  Specify maximum number of emulated MMIO regions. (Default value is 16)\n </p>\n</div>\n"
				}
			}
		},
		"MiscCfgOptionsType": {
			"type": "object",
			"required": [
				"GPU_SBDF"
			],
			"properties": {
				"GPU_SBDF": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x00000010",
					"title": "GPU_SBDF",
					"description": "<div class=\"document\">\n <p>\n  Segment, Bus, Device, and function of the GPU.\n </p>\n</div>\n"
				}
			}
		},
		"HVConfigType": {
			"type": "object",
			"required": [
				"DEBUG_OPTIONS",
				"FEATURES",
				"MEMORY",
				"CAPACITIES",
				"MISC_CFG",
				"vuart_connections"
			],
			"properties": {
				"DEBUG_OPTIONS": {
					"$ref": "#/definitions/DebugOptionsType",
					"title": "Debug options",
					"description": "<div class=\"document\">\n <p>\n  Configure the debug facilities.\n </p>\n</div>\n"
				},
				"FEATURES": {
					"$ref": "#/definitions/FeatureOptionsType",
					"title": "Hypervisor features",
					"description": "<div class=\"document\">\n <p>\n  Enable hypervisor features.\n </p>\n</div>\n"
				},
				"MEMORY": {
					"$ref": "#/definitions/MemoryOptionsType",
					"title": "Memory options",
					"description": "<div class=\"document\">\n <p>\n  Configure memory used by the hypervisor.\n </p>\n</div>\n"
				},
				"CAPACITIES": {
					"$ref": "#/definitions/CapacitiesOptionsType",
					"title": "Hypervisor capacities",
					"description": "<div class=\"document\">\n <p>\n  Configure the capacities of the hypervisor.\n </p>\n</div>\n"
				},
				"MISC_CFG": {
					"$ref": "#/definitions/MiscCfgOptionsType",
					"title": "MISC_CFG",
					"description": "<div class=\"document\">\n <p>\n  Miscellaneous options for workarounds.\n </p>\n</div>\n"
				},
				"vuart_connections": {
					"$ref": "#/definitions/VuartConnectionsType",
					"title": "Virtual UART connection",
					"description": "<div class=\"document\">\n <p>\n  Specify the vUART connection setting.\nRefer to\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/tutorials/vuart_configuration.html#vuart-config\" target=\"_blank\">\n   Enable vUART Configurations\n  </a>\n  for detailed vUART settings.\n </p>\n</div>\n"
				}
			}
		},
		"VMConfigType": {
			"type": "object",
			"required": [
				"load_order",
				"vm_type",
				"name",
				"clos",
				"memory",
				"priority",
				"companion_vmid",
				"console_vuart",
				"os_type",
				"vbootloader",
				"vuart0",
				"virtio_devices"
			],
			"properties": {
				"load_order": {
					"$ref": "#/definitions/LoadOrderType",
					"title": "Load order",
					"description": "<div class=\"document\">\n <p>\n  Specify the load_order.\n </p>\n</div>\n"
				},
				"vm_type": {
					"$ref": "#/definitions/VMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM type.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Type in the name used to identify each VM.  The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Specify LAPIC to passthrough.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Specify Polling mode for IO Completion.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization support",
					"description": "<div class=\"document\">\n <p>\n  Specify nested virtualization support for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual CAT support",
					"description": "<div class=\"document\">\n <p>\n  Specify virtual CAT support for VM.\n </p>\n</div>\n"
				},
				"secure_world_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "secure_world_support",
					"description": "<div class=\"document\">\n <p>\n  Specify secure world support for trustry OS.\n </p>\n</div>\n"
				},
				"hide_mtrr_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "hide_mtrr_support",
					"description": "<div class=\"document\">\n <p>\n  Specify MTRR capability to hide for VM.\n </p>\n</div>\n"
				},
				"security_vm": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "security_vm",
					"description": "<div class=\"document\">\n <p>\n  Specify TPM2 FIXUP for VM.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  List of pCPU that this VM's vCPUs are pinned to.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"epc_section": {
					"$ref": "#/definitions/EPCSection",
					"title": "epc_section",
					"description": "<div class=\"document\">\n <p>\n  Specify SGX Enclave Page Cache section base and size in byte. It must be page aligned.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/MemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"priority": {
					"$ref": "#/definitions/PriorityType",
					"default": "PRIO_LOW",
					"title": "priority",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM vCPU priority for scheduling.\n </p>\n</div>\n"
				},
				"companion_vmid": {
					"type": "integer",
					"default": 65535,
					"title": "companion_vmid",
					"description": "<div class=\"document\">\n <p>\n  Specify the companion VM id of this VM.\n </p>\n</div>\n"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<div class=\"document\">\n <p>\n  General information for host kernel, boot\nargument and memory.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "console_vuart",
					"description": "<div class=\"document\">\n <p>\n  Specify the console vUART (aka PCI based vUART) with the vUART ID by\nits\n  <span class=\"docutils literal\">\n   id\n  </span>\n  attribute.\n </p>\n</div>\n"
				},
				"mmio_resources": {
					"$ref": "#/definitions/MMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<div class=\"document\">\n <p>\n  MMIO resources to passthrough.\n </p>\n</div>\n"
				},
				"pt_intx": {
					"type": "string",
					"title": "pt_intx",
					"description": "<div class=\"document\">\n <p>\n  Determine the static memory size of pt_intx array. It is used to describe the pre-launched VM owned ioapic pins and the corresponding mapping between physical GSI and virtual GSI.\n </p>\n</div>\n"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of PCIE Precision Time Measurement (PTM) mechanism for devices with PTM capability and for real-time application. HV provides PCIE root port emulation instead of host bridge emulation for VM , PTM could coordinate timing between device and root port with device\u2019s local timebases without relying on software.\n </p>\n</div>\n"
				},
				"os_type": {
					"$ref": "#/definitions/OSType",
					"default": "Non-Windows OS",
					"title": "OS type",
					"description": "<div class=\"document\">\n <p>\n  Specify user VM OS type, for config tool to format the DM commandline. If it is windows, then add -windows to DM parameter. It supports Oracle virtio-blk, virtio-net and virtio-input devices for Windows guests with secure boot. For windows guest vm this option is mandatory for running Windows in a User VM. If it is not used, Windows will not recognize the virtual disk. When it is linux like OS , config tool also format the related parameters in the same way.\n </p>\n</div>\n"
				},
				"vbootloader": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "OVMF (Open Virtual Machine Firmware)",
					"description": "<div class=\"document\">\n <p>\n  Specify if to use virtual boot loader OVMF (Open Virtual Machine Firmware) to boot User VM, right now ovmf is the only virtual boot loader supported. User could also disable this to use another boot protocol with parameter -K set.\n </p>\n</div>\n"
				},
				"vuart0": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "Emulate COM1 as standard I/O",
					"description": "<div class=\"document\">\n <p>\n  Enable ACRN Device Model to emulate COM1 as a User VM standard IO.\n </p>\n</div>\n"
				},
				"usb_xhci": {
					"type": "string",
					"pattern": "^([\\d]+-[\\d]+){0,1}(:[\\d]+-[\\d]+)*$",
					"title": "usb_xhci",
					"description": "<div class=\"document\">\n <p>\n  Device model emulates USB controller used to support USB 3.0 devices, (also supports USB 2.0 and USB 1.0 devices). The physical USB devices attached on the specified bus and port in service VM will be detected by User VM and used as expected as parameters setting.\n </p>\n</div>\n"
				},
				"virtio_devices": {
					"type": "object",
					"properties": {
						"console": {
							"type": "string",
							"title": "console",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio console device setting.Input format:\n  </dt>\n  <dd>\n   <p>\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      [@]stdio|tty|pty|sock:portname[=portpath][,[@]stdio|tty|pty:portname[=portpath]]\n     </span>\n    </span>\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"network": {
							"type": "string",
							"title": "network",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio network device setting.\n  </dt>\n  <dd>\n   <p>\n    Input format:\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      device_name[,vhost][,mac=XX:XX:XX:XX:XX:XX]\n     </span>\n    </span>\n    .\nThe\n    <span class=\"docutils literal\">\n     device_name\n    </span>\n    is the name of the TAP (or MacVTap) device.\nIt must include the keyword\n    <span class=\"docutils literal\">\n     tap\n    </span>\n    .\n    <span class=\"docutils literal\">\n     vhost\n    </span>\n    specifies the\nvhost backend; otherwise, the VBSU backend is used. The\n    <span class=\"docutils literal\">\n     mac\n    </span>\n    address is optional.\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"input": {
							"type": "string",
							"title": "input",
							"description": "<div class=\"document\">\n <p>\n  The virtio input device setting.\n </p>\n</div>\n"
						},
						"block": {
							"type": "string",
							"title": "block",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio block device setting.\n  </dt>\n  <dd>\n   <p>\n    Format: [blk partition:][img path] e.g.: /dev/sda3:./a/b.img\n   </p>\n  </dd>\n </dl>\n</div>\n"
						}
					},
					"title": "Virt-IO devices",
					"description": "<div class=\"document\">\n <p>\n  Enable virt-IO devices in post-launched VMs.\n </p>\n</div>\n"
				}
			}
		},
		"ACRNConfigType": {
			"type": "object",
			"required": [
				"hv"
			],
			"properties": {
				"hv": {
					"$ref": "#/definitions/HVConfigType",
					"title": "hv",
					"description": "<div class=\"document\">\n <p>\n  The hypervisor configuration defines a working scenario and target\nboard by configuring the hypervisor image features and capabilities such as\nsetting up the log and the serial port.\n </p>\n</div>\n"
				}
			}
		},
		"PreLaunchedMemoryInfo": {
			"type": "object",
			"required": [
				"start_hpa"
			],
			"properties": {
				"start_hpa": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x100000000",
					"title": "start_hpa",
					"description": "<div class=\"document\">\n <p>\n  The starting physical address in host for the VM.\n </p>\n</div>\n"
				},
				"size": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x20000000",
					"title": "size",
					"description": "<div class=\"document\">\n <p>\n  The memory size in bytes for the VM. Default value is\n  <span class=\"docutils literal\">\n   0x200000000\n  </span>\n  .\n </p>\n</div>\n"
				},
				"start_hpa2": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x0",
					"title": "start_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Start of second HPA for non-contiguous allocations in host for the VM.\n </p>\n</div>\n"
				},
				"size_hpa2": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x0",
					"title": "size_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Memory size of second HPA for non-contiguous allocations in Bytes for the VM.\n </p>\n</div>\n"
				}
			}
		},
		"PreLaunchedVMConfigType": {
			"type": "object",
			"required": [
				"load_order",
				"vm_type",
				"name",
				"clos",
				"memory",
				"priority",
				"companion_vmid",
				"console_vuart"
			],
			"properties": {
				"load_order": {
					"$ref": "#/definitions/LoadOrderType",
					"title": "Load order",
					"description": "<div class=\"document\">\n <p>\n  Specify the load_order.\n </p>\n</div>\n"
				},
				"vm_type": {
					"$ref": "#/definitions/VMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM type.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Type in the name used to identify each VM.  The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Specify LAPIC to passthrough.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Specify Polling mode for IO Completion.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization support",
					"description": "<div class=\"document\">\n <p>\n  Specify nested virtualization support for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual CAT support",
					"description": "<div class=\"document\">\n <p>\n  Specify virtual CAT support for VM.\n </p>\n</div>\n"
				},
				"secure_world_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "secure_world_support",
					"description": "<div class=\"document\">\n <p>\n  Specify secure world support for trustry OS.\n </p>\n</div>\n"
				},
				"hide_mtrr_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "hide_mtrr_support",
					"description": "<div class=\"document\">\n <p>\n  Specify MTRR capability to hide for VM.\n </p>\n</div>\n"
				},
				"security_vm": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "security_vm",
					"description": "<div class=\"document\">\n <p>\n  Specify TPM2 FIXUP for VM.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  List of pCPU that this VM's vCPUs are pinned to.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"epc_section": {
					"$ref": "#/definitions/EPCSection",
					"title": "epc_section",
					"description": "<div class=\"document\">\n <p>\n  Specify SGX Enclave Page Cache section base and size in byte. It must be page aligned.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/PreLaunchedMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"priority": {
					"$ref": "#/definitions/PriorityType",
					"default": "PRIO_LOW",
					"title": "priority",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM vCPU priority for scheduling.\n </p>\n</div>\n"
				},
				"companion_vmid": {
					"type": "integer",
					"default": 65535,
					"title": "companion_vmid",
					"description": "<div class=\"document\">\n <p>\n  Specify the companion VM id of this VM.\n </p>\n</div>\n"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<div class=\"document\">\n <p>\n  General information for host kernel, boot\nargument and memory.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "console_vuart",
					"description": "<div class=\"document\">\n <p>\n  Specify the console vUART (aka PCI based vUART) with the vUART ID by\nits\n  <span class=\"docutils literal\">\n   id\n  </span>\n  attribute.\n </p>\n</div>\n"
				},
				"mmio_resources": {
					"$ref": "#/definitions/MMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<div class=\"document\">\n <p>\n  MMIO resources to passthrough.\n </p>\n</div>\n"
				},
				"pt_intx": {
					"type": "string",
					"title": "pt_intx",
					"description": "<div class=\"document\">\n <p>\n  Determine the static memory size of pt_intx array. It is used to describe the pre-launched VM owned ioapic pins and the corresponding mapping between physical GSI and virtual GSI.\n </p>\n</div>\n"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of PCIE Precision Time Measurement (PTM) mechanism for devices with PTM capability and for real-time application. HV provides PCIE root port emulation instead of host bridge emulation for VM , PTM could coordinate timing between device and root port with device\u2019s local timebases without relying on software.\n </p>\n</div>\n"
				}
			}
		},
		"ServiceMemoryInfo": {
			"type": "object",
			"required": [
				"start_hpa"
			],
			"properties": {
				"start_hpa": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x100000000",
					"title": "start_hpa",
					"description": "<div class=\"document\">\n <p>\n  The starting physical address in host for the VM.\n </p>\n</div>\n"
				},
				"size": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x20000000",
					"title": "size",
					"description": "<div class=\"document\">\n <p>\n  The memory size in bytes for the VM. Default value is\n  <span class=\"docutils literal\">\n   0x200000000\n  </span>\n  .\n </p>\n</div>\n"
				},
				"start_hpa2": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x0",
					"title": "start_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Start of second HPA for non-contiguous allocations in host for the VM.\n </p>\n</div>\n"
				},
				"size_hpa2": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x0",
					"title": "size_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Memory size of second HPA for non-contiguous allocations in Bytes for the VM.\n </p>\n</div>\n"
				}
			}
		},
		"ServiceVMConfigType": {
			"type": "object",
			"required": [
				"load_order",
				"vm_type",
				"name",
				"clos",
				"memory",
				"priority",
				"companion_vmid",
				"console_vuart"
			],
			"properties": {
				"load_order": {
					"$ref": "#/definitions/LoadOrderType",
					"title": "Load order",
					"description": "<div class=\"document\">\n <p>\n  Specify the load_order.\n </p>\n</div>\n"
				},
				"vm_type": {
					"$ref": "#/definitions/VMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM type.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Type in the name used to identify each VM.  The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Specify LAPIC to passthrough.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Specify Polling mode for IO Completion.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization support",
					"description": "<div class=\"document\">\n <p>\n  Specify nested virtualization support for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual CAT support",
					"description": "<div class=\"document\">\n <p>\n  Specify virtual CAT support for VM.\n </p>\n</div>\n"
				},
				"secure_world_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "secure_world_support",
					"description": "<div class=\"document\">\n <p>\n  Specify secure world support for trustry OS.\n </p>\n</div>\n"
				},
				"hide_mtrr_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "hide_mtrr_support",
					"description": "<div class=\"document\">\n <p>\n  Specify MTRR capability to hide for VM.\n </p>\n</div>\n"
				},
				"security_vm": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "security_vm",
					"description": "<div class=\"document\">\n <p>\n  Specify TPM2 FIXUP for VM.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  List of pCPU that this VM's vCPUs are pinned to.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/ServiceMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"priority": {
					"$ref": "#/definitions/PriorityType",
					"default": "PRIO_LOW",
					"title": "priority",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM vCPU priority for scheduling.\n </p>\n</div>\n"
				},
				"companion_vmid": {
					"type": "integer",
					"default": 65535,
					"title": "companion_vmid",
					"description": "<div class=\"document\">\n <p>\n  Specify the companion VM id of this VM.\n </p>\n</div>\n"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<div class=\"document\">\n <p>\n  General information for host kernel, boot\nargument and memory.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "console_vuart",
					"description": "<div class=\"document\">\n <p>\n  Specify the console vUART (aka PCI based vUART) with the vUART ID by\nits\n  <span class=\"docutils literal\">\n   id\n  </span>\n  attribute.\n </p>\n</div>\n"
				}
			}
		},
		"PostLaunchedMemoryInfo": {
			"type": "object",
			"required": [
				"whole"
			],
			"properties": {
				"whole": {
					"type": "integer",
					"default": 256,
					"title": "VM physical memory allocation (MB)",
					"description": "<div class=\"document\">\n <p>\n  Specify the physical memory allocated to this VM in Megabytes.\n </p>\n</div>\n"
				}
			}
		},
		"PostLaunchedMMIOResourcesConfiguration": {
			"type": "object",
			"properties": {
				"TPM2": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Trusted Platform Module passthrough",
					"description": "<div class=\"document\">\n <p>\n  Passthrough the Trusted Platform Module (TPM2) device to this VM. (Optional) (Default value is n)\n </p>\n</div>\n"
				}
			}
		},
		"PostLaunchedVMConfigType": {
			"type": "object",
			"required": [
				"load_order",
				"vm_type",
				"name",
				"clos",
				"memory",
				"priority",
				"companion_vmid",
				"console_vuart",
				"os_type",
				"vbootloader",
				"vuart0",
				"virtio_devices"
			],
			"properties": {
				"load_order": {
					"$ref": "#/definitions/LoadOrderType",
					"title": "Load order",
					"description": "<div class=\"document\">\n <p>\n  Specify the load_order.\n </p>\n</div>\n"
				},
				"vm_type": {
					"$ref": "#/definitions/VMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM type.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Type in the name used to identify each VM.  The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Specify LAPIC to passthrough.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Specify Polling mode for IO Completion.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization support",
					"description": "<div class=\"document\">\n <p>\n  Specify nested virtualization support for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual CAT support",
					"description": "<div class=\"document\">\n <p>\n  Specify virtual CAT support for VM.\n </p>\n</div>\n"
				},
				"secure_world_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "secure_world_support",
					"description": "<div class=\"document\">\n <p>\n  Specify secure world support for trustry OS.\n </p>\n</div>\n"
				},
				"hide_mtrr_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "hide_mtrr_support",
					"description": "<div class=\"document\">\n <p>\n  Specify MTRR capability to hide for VM.\n </p>\n</div>\n"
				},
				"security_vm": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "security_vm",
					"description": "<div class=\"document\">\n <p>\n  Specify TPM2 FIXUP for VM.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  List of pCPU that this VM's vCPUs are pinned to.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/PostLaunchedMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"priority": {
					"$ref": "#/definitions/PriorityType",
					"default": "PRIO_LOW",
					"title": "priority",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM vCPU priority for scheduling.\n </p>\n</div>\n"
				},
				"companion_vmid": {
					"type": "integer",
					"default": 65535,
					"title": "companion_vmid",
					"description": "<div class=\"document\">\n <p>\n  Specify the companion VM id of this VM.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "console_vuart",
					"description": "<div class=\"document\">\n <p>\n  Specify the console vUART (aka PCI based vUART) with the vUART ID by\nits\n  <span class=\"docutils literal\">\n   id\n  </span>\n  attribute.\n </p>\n</div>\n"
				},
				"mmio_resources": {
					"$ref": "#/definitions/PostLaunchedMMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<div class=\"document\">\n <p>\n  MMIO resources to passthrough.\n </p>\n</div>\n"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of PCIE Precision Time Measurement (PTM) mechanism for devices with PTM capability and for real-time application. HV provides PCIE root port emulation instead of host bridge emulation for VM , PTM could coordinate timing between device and root port with device\u2019s local timebases without relying on software.\n </p>\n</div>\n"
				},
				"os_type": {
					"$ref": "#/definitions/OSType",
					"default": "Non-Windows OS",
					"title": "OS type",
					"description": "<div class=\"document\">\n <p>\n  Specify user VM OS type, for config tool to format the DM commandline. If it is windows, then add -windows to DM parameter. It supports Oracle virtio-blk, virtio-net and virtio-input devices for Windows guests with secure boot. For windows guest vm this option is mandatory for running Windows in a User VM. If it is not used, Windows will not recognize the virtual disk. When it is linux like OS , config tool also format the related parameters in the same way.\n </p>\n</div>\n"
				},
				"vbootloader": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "OVMF (Open Virtual Machine Firmware)",
					"description": "<div class=\"document\">\n <p>\n  Specify if to use virtual boot loader OVMF (Open Virtual Machine Firmware) to boot User VM, right now ovmf is the only virtual boot loader supported. User could also disable this to use another boot protocol with parameter -K set.\n </p>\n</div>\n"
				},
				"vuart0": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "Emulate COM1 as standard I/O",
					"description": "<div class=\"document\">\n <p>\n  Enable ACRN Device Model to emulate COM1 as a User VM standard IO.\n </p>\n</div>\n"
				},
				"usb_xhci": {
					"type": "string",
					"pattern": "^([\\d]+-[\\d]+){0,1}(:[\\d]+-[\\d]+)*$",
					"title": "usb_xhci",
					"description": "<div class=\"document\">\n <p>\n  Device model emulates USB controller used to support USB 3.0 devices, (also supports USB 2.0 and USB 1.0 devices). The physical USB devices attached on the specified bus and port in service VM will be detected by User VM and used as expected as parameters setting.\n </p>\n</div>\n"
				},
				"virtio_devices": {
					"type": "object",
					"properties": {
						"console": {
							"type": "string",
							"title": "console",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio console device setting.Input format:\n  </dt>\n  <dd>\n   <p>\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      [@]stdio|tty|pty|sock:portname[=portpath][,[@]stdio|tty|pty:portname[=portpath]]\n     </span>\n    </span>\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"network": {
							"type": "string",
							"title": "network",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio network device setting.\n  </dt>\n  <dd>\n   <p>\n    Input format:\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      device_name[,vhost][,mac=XX:XX:XX:XX:XX:XX]\n     </span>\n    </span>\n    .\nThe\n    <span class=\"docutils literal\">\n     device_name\n    </span>\n    is the name of the TAP (or MacVTap) device.\nIt must include the keyword\n    <span class=\"docutils literal\">\n     tap\n    </span>\n    .\n    <span class=\"docutils literal\">\n     vhost\n    </span>\n    specifies the\nvhost backend; otherwise, the VBSU backend is used. The\n    <span class=\"docutils literal\">\n     mac\n    </span>\n    address is optional.\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"input": {
							"type": "string",
							"title": "input",
							"description": "<div class=\"document\">\n <p>\n  The virtio input device setting.\n </p>\n</div>\n"
						},
						"block": {
							"type": "string",
							"title": "block",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio block device setting.\n  </dt>\n  <dd>\n   <p>\n    Format: [blk partition:][img path] e.g.: /dev/sda3:./a/b.img\n   </p>\n  </dd>\n </dl>\n</div>\n"
						}
					},
					"title": "Virt-IO devices",
					"description": "<div class=\"document\">\n <p>\n  Enable virt-IO devices in post-launched VMs.\n </p>\n</div>\n"
				}
			}
		},
		"BasicMemoryInfo": {
			"type": "object",
			"required": [
				"whole"
			],
			"properties": {
				"whole": {
					"type": "integer",
					"default": 256,
					"title": "VM physical memory allocation (MB)",
					"description": "<div class=\"document\">\n <p>\n  Specify the physical memory allocated to this VM in Megabytes.\n </p>\n</div>\n"
				}
			}
		},
		"VMBasicConfigType": {
			"type": "object",
			"required": [
				"vm_type",
				"name",
				"memory",
				"console_vuart",
				"os_type",
				"vbootloader",
				"vuart0",
				"virtio_devices"
			],
			"properties": {
				"vm_type": {
					"$ref": "#/definitions/BasicVMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM type.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Type in the name used to identify each VM.  The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  List of pCPU that this VM's vCPUs are pinned to.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/BasicMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<div class=\"document\">\n <p>\n  General information for host kernel, boot\nargument and memory.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "console_vuart",
					"description": "<div class=\"document\">\n <p>\n  Specify the console vUART (aka PCI based vUART) with the vUART ID by\nits\n  <span class=\"docutils literal\">\n   id\n  </span>\n  attribute.\n </p>\n</div>\n"
				},
				"mmio_resources": {
					"$ref": "#/definitions/MMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<div class=\"document\">\n <p>\n  MMIO resources to passthrough.\n </p>\n</div>\n"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"os_type": {
					"$ref": "#/definitions/OSType",
					"default": "Non-Windows OS",
					"title": "OS type",
					"description": "<div class=\"document\">\n <p>\n  Specify user VM OS type, for config tool to format the DM commandline. If it is windows, then add -windows to DM parameter. It supports Oracle virtio-blk, virtio-net and virtio-input devices for Windows guests with secure boot. For windows guest vm this option is mandatory for running Windows in a User VM. If it is not used, Windows will not recognize the virtual disk. When it is linux like OS , config tool also format the related parameters in the same way.\n </p>\n</div>\n"
				},
				"vbootloader": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "OVMF (Open Virtual Machine Firmware)",
					"description": "<div class=\"document\">\n <p>\n  Specify if to use virtual boot loader OVMF (Open Virtual Machine Firmware) to boot User VM, right now ovmf is the only virtual boot loader supported. User could also disable this to use another boot protocol with parameter -K set.\n </p>\n</div>\n"
				},
				"vuart0": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "Emulate COM1 as standard I/O",
					"description": "<div class=\"document\">\n <p>\n  Enable ACRN Device Model to emulate COM1 as a User VM standard IO.\n </p>\n</div>\n"
				},
				"usb_xhci": {
					"type": "string",
					"pattern": "^([\\d]+-[\\d]+){0,1}(:[\\d]+-[\\d]+)*$",
					"title": "usb_xhci",
					"description": "<div class=\"document\">\n <p>\n  Device model emulates USB controller used to support USB 3.0 devices, (also supports USB 2.0 and USB 1.0 devices). The physical USB devices attached on the specified bus and port in service VM will be detected by User VM and used as expected as parameters setting.\n </p>\n</div>\n"
				},
				"virtio_devices": {
					"type": "object",
					"properties": {
						"console": {
							"type": "string",
							"title": "console",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio console device setting.Input format:\n  </dt>\n  <dd>\n   <p>\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      [@]stdio|tty|pty|sock:portname[=portpath][,[@]stdio|tty|pty:portname[=portpath]]\n     </span>\n    </span>\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"network": {
							"type": "string",
							"title": "network",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio network device setting.\n  </dt>\n  <dd>\n   <p>\n    Input format:\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      device_name[,vhost][,mac=XX:XX:XX:XX:XX:XX]\n     </span>\n    </span>\n    .\nThe\n    <span class=\"docutils literal\">\n     device_name\n    </span>\n    is the name of the TAP (or MacVTap) device.\nIt must include the keyword\n    <span class=\"docutils literal\">\n     tap\n    </span>\n    .\n    <span class=\"docutils literal\">\n     vhost\n    </span>\n    specifies the\nvhost backend; otherwise, the VBSU backend is used. The\n    <span class=\"docutils literal\">\n     mac\n    </span>\n    address is optional.\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"input": {
							"type": "string",
							"title": "input",
							"description": "<div class=\"document\">\n <p>\n  The virtio input device setting.\n </p>\n</div>\n"
						},
						"block": {
							"type": "string",
							"title": "block",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio block device setting.\n  </dt>\n  <dd>\n   <p>\n    Format: [blk partition:][img path] e.g.: /dev/sda3:./a/b.img\n   </p>\n  </dd>\n </dl>\n</div>\n"
						}
					},
					"title": "Virt-IO devices",
					"description": "<div class=\"document\">\n <p>\n  Enable virt-IO devices in post-launched VMs.\n </p>\n</div>\n"
				}
			}
		},
		"PreLaunchedVMBasicConfigType": {
			"type": "object",
			"required": [
				"vm_type",
				"name",
				"console_vuart"
			],
			"properties": {
				"vm_type": {
					"$ref": "#/definitions/BasicVMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM type.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Type in the name used to identify each VM.  The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  List of pCPU that this VM's vCPUs are pinned to.\n </p>\n</div>\n"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<div class=\"document\">\n <p>\n  General information for host kernel, boot\nargument and memory.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "console_vuart",
					"description": "<div class=\"document\">\n <p>\n  Specify the console vUART (aka PCI based vUART) with the vUART ID by\nits\n  <span class=\"docutils literal\">\n   id\n  </span>\n  attribute.\n </p>\n</div>\n"
				},
				"mmio_resources": {
					"$ref": "#/definitions/MMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<div class=\"document\">\n <p>\n  MMIO resources to passthrough.\n </p>\n</div>\n"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				}
			}
		},
		"ServiceVMBasicConfigType": {
			"type": "object",
			"required": [
				"vm_type",
				"name",
				"console_vuart"
			],
			"properties": {
				"vm_type": {
					"$ref": "#/definitions/BasicVMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM type.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Type in the name used to identify each VM.  The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  List of pCPU that this VM's vCPUs are pinned to.\n </p>\n</div>\n"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<div class=\"document\">\n <p>\n  General information for host kernel, boot\nargument and memory.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "console_vuart",
					"description": "<div class=\"document\">\n <p>\n  Specify the console vUART (aka PCI based vUART) with the vUART ID by\nits\n  <span class=\"docutils literal\">\n   id\n  </span>\n  attribute.\n </p>\n</div>\n"
				}
			}
		},
		"PostLaunchedVMBasicConfigType": {
			"type": "object",
			"required": [
				"vm_type",
				"name",
				"memory",
				"console_vuart",
				"os_type",
				"vbootloader",
				"vuart0",
				"virtio_devices"
			],
			"properties": {
				"vm_type": {
					"$ref": "#/definitions/BasicVMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM type.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Type in the name used to identify each VM.  The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  List of pCPU that this VM's vCPUs are pinned to.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/PostLaunchedMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "console_vuart",
					"description": "<div class=\"document\">\n <p>\n  Specify the console vUART (aka PCI based vUART) with the vUART ID by\nits\n  <span class=\"docutils literal\">\n   id\n  </span>\n  attribute.\n </p>\n</div>\n"
				},
				"mmio_resources": {
					"$ref": "#/definitions/PostLaunchedMMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<div class=\"document\">\n <p>\n  MMIO resources to passthrough.\n </p>\n</div>\n"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"os_type": {
					"$ref": "#/definitions/OSType",
					"default": "Non-Windows OS",
					"title": "OS type",
					"description": "<div class=\"document\">\n <p>\n  Specify user VM OS type, for config tool to format the DM commandline. If it is windows, then add -windows to DM parameter. It supports Oracle virtio-blk, virtio-net and virtio-input devices for Windows guests with secure boot. For windows guest vm this option is mandatory for running Windows in a User VM. If it is not used, Windows will not recognize the virtual disk. When it is linux like OS , config tool also format the related parameters in the same way.\n </p>\n</div>\n"
				},
				"vbootloader": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "OVMF (Open Virtual Machine Firmware)",
					"description": "<div class=\"document\">\n <p>\n  Specify if to use virtual boot loader OVMF (Open Virtual Machine Firmware) to boot User VM, right now ovmf is the only virtual boot loader supported. User could also disable this to use another boot protocol with parameter -K set.\n </p>\n</div>\n"
				},
				"vuart0": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "Emulate COM1 as standard I/O",
					"description": "<div class=\"document\">\n <p>\n  Enable ACRN Device Model to emulate COM1 as a User VM standard IO.\n </p>\n</div>\n"
				},
				"usb_xhci": {
					"type": "string",
					"pattern": "^([\\d]+-[\\d]+){0,1}(:[\\d]+-[\\d]+)*$",
					"title": "usb_xhci",
					"description": "<div class=\"document\">\n <p>\n  Device model emulates USB controller used to support USB 3.0 devices, (also supports USB 2.0 and USB 1.0 devices). The physical USB devices attached on the specified bus and port in service VM will be detected by User VM and used as expected as parameters setting.\n </p>\n</div>\n"
				},
				"virtio_devices": {
					"type": "object",
					"properties": {
						"console": {
							"type": "string",
							"title": "console",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio console device setting.Input format:\n  </dt>\n  <dd>\n   <p>\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      [@]stdio|tty|pty|sock:portname[=portpath][,[@]stdio|tty|pty:portname[=portpath]]\n     </span>\n    </span>\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"network": {
							"type": "string",
							"title": "network",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio network device setting.\n  </dt>\n  <dd>\n   <p>\n    Input format:\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      device_name[,vhost][,mac=XX:XX:XX:XX:XX:XX]\n     </span>\n    </span>\n    .\nThe\n    <span class=\"docutils literal\">\n     device_name\n    </span>\n    is the name of the TAP (or MacVTap) device.\nIt must include the keyword\n    <span class=\"docutils literal\">\n     tap\n    </span>\n    .\n    <span class=\"docutils literal\">\n     vhost\n    </span>\n    specifies the\nvhost backend; otherwise, the VBSU backend is used. The\n    <span class=\"docutils literal\">\n     mac\n    </span>\n    address is optional.\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"input": {
							"type": "string",
							"title": "input",
							"description": "<div class=\"document\">\n <p>\n  The virtio input device setting.\n </p>\n</div>\n"
						},
						"block": {
							"type": "string",
							"title": "block",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio block device setting.\n  </dt>\n  <dd>\n   <p>\n    Format: [blk partition:][img path] e.g.: /dev/sda3:./a/b.img\n   </p>\n  </dd>\n </dl>\n</div>\n"
						}
					},
					"title": "Virt-IO devices",
					"description": "<div class=\"document\">\n <p>\n  Enable virt-IO devices in post-launched VMs.\n </p>\n</div>\n"
				}
			}
		},
		"BasicFeatureOptionsType": {
			"type": "object",
			"required": [
				"IVSHMEM"
			],
			"properties": {
				"IVSHMEM": {
					"$ref": "#/definitions/IVSHMEMInfo",
					"title": "Inter-VM shared memory",
					"description": ""
				}
			}
		},
		"HVBasicConfigType": {
			"type": "object",
			"required": [
				"DEBUG_OPTIONS",
				"FEATURES",
				"vuart_connections"
			],
			"properties": {
				"DEBUG_OPTIONS": {
					"$ref": "#/definitions/DebugOptionsType",
					"title": "Debug options",
					"description": "<div class=\"document\">\n <p>\n  Configure the debug facilities.\n </p>\n</div>\n"
				},
				"FEATURES": {
					"$ref": "#/definitions/BasicFeatureOptionsType",
					"title": "Hypervisor features",
					"description": "<div class=\"document\">\n <p>\n  Enable hypervisor features.\n </p>\n</div>\n"
				},
				"vuart_connections": {
					"$ref": "#/definitions/VuartConnectionsType",
					"title": "Virtual UART connection",
					"description": "<div class=\"document\">\n <p>\n  Specify the vUART connection setting.\nRefer to\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/tutorials/vuart_configuration.html#vuart-config\" target=\"_blank\">\n   Enable vUART Configurations\n  </a>\n  for detailed vUART settings.\n </p>\n</div>\n"
				}
			}
		},
		"AdvancedMemoryInfo": {
			"type": "object",
			"required": [
				"start_hpa"
			],
			"properties": {
				"start_hpa": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x100000000",
					"title": "start_hpa",
					"description": "<div class=\"document\">\n <p>\n  The starting physical address in host for the VM.\n </p>\n</div>\n"
				},
				"size": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x20000000",
					"title": "size",
					"description": "<div class=\"document\">\n <p>\n  The memory size in bytes for the VM. Default value is\n  <span class=\"docutils literal\">\n   0x200000000\n  </span>\n  .\n </p>\n</div>\n"
				},
				"start_hpa2": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x0",
					"title": "start_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Start of second HPA for non-contiguous allocations in host for the VM.\n </p>\n</div>\n"
				},
				"size_hpa2": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x0",
					"title": "size_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Memory size of second HPA for non-contiguous allocations in Bytes for the VM.\n </p>\n</div>\n"
				}
			}
		},
		"VMAdvancedConfigType": {
			"type": "object",
			"required": [
				"clos",
				"memory"
			],
			"properties": {
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Specify LAPIC to passthrough.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Specify Polling mode for IO Completion.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization support",
					"description": "<div class=\"document\">\n <p>\n  Specify nested virtualization support for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual CAT support",
					"description": "<div class=\"document\">\n <p>\n  Specify virtual CAT support for VM.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"epc_section": {
					"$ref": "#/definitions/EPCSection",
					"title": "epc_section",
					"description": "<div class=\"document\">\n <p>\n  Specify SGX Enclave Page Cache section base and size in byte. It must be page aligned.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/AdvancedMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"pt_intx": {
					"type": "string",
					"title": "pt_intx",
					"description": "<div class=\"document\">\n <p>\n  Determine the static memory size of pt_intx array. It is used to describe the pre-launched VM owned ioapic pins and the corresponding mapping between physical GSI and virtual GSI.\n </p>\n</div>\n"
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of PCIE Precision Time Measurement (PTM) mechanism for devices with PTM capability and for real-time application. HV provides PCIE root port emulation instead of host bridge emulation for VM , PTM could coordinate timing between device and root port with device\u2019s local timebases without relying on software.\n </p>\n</div>\n"
				}
			}
		},
		"PreLaunchedVMAdvancedConfigType": {
			"type": "object",
			"required": [
				"clos",
				"memory"
			],
			"properties": {
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Specify LAPIC to passthrough.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Specify Polling mode for IO Completion.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization support",
					"description": "<div class=\"document\">\n <p>\n  Specify nested virtualization support for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual CAT support",
					"description": "<div class=\"document\">\n <p>\n  Specify virtual CAT support for VM.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"epc_section": {
					"$ref": "#/definitions/EPCSection",
					"title": "epc_section",
					"description": "<div class=\"document\">\n <p>\n  Specify SGX Enclave Page Cache section base and size in byte. It must be page aligned.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/PreLaunchedMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"pt_intx": {
					"type": "string",
					"title": "pt_intx",
					"description": "<div class=\"document\">\n <p>\n  Determine the static memory size of pt_intx array. It is used to describe the pre-launched VM owned ioapic pins and the corresponding mapping between physical GSI and virtual GSI.\n </p>\n</div>\n"
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of PCIE Precision Time Measurement (PTM) mechanism for devices with PTM capability and for real-time application. HV provides PCIE root port emulation instead of host bridge emulation for VM , PTM could coordinate timing between device and root port with device\u2019s local timebases without relying on software.\n </p>\n</div>\n"
				}
			}
		},
		"ServiceVMAdvancedConfigType": {
			"type": "object",
			"required": [
				"clos",
				"memory"
			],
			"properties": {
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Specify LAPIC to passthrough.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Specify Polling mode for IO Completion.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization support",
					"description": "<div class=\"document\">\n <p>\n  Specify nested virtualization support for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual CAT support",
					"description": "<div class=\"document\">\n <p>\n  Specify virtual CAT support for VM.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/ServiceMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				}
			}
		},
		"PostLaunchedVMAdvancedConfigType": {
			"type": "object",
			"required": [
				"clos"
			],
			"properties": {
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Specify LAPIC to passthrough.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Specify Polling mode for IO Completion.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization support",
					"description": "<div class=\"document\">\n <p>\n  Specify nested virtualization support for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual CAT support",
					"description": "<div class=\"document\">\n <p>\n  Specify virtual CAT support for VM.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of PCIE Precision Time Measurement (PTM) mechanism for devices with PTM capability and for real-time application. HV provides PCIE root port emulation instead of host bridge emulation for VM , PTM could coordinate timing between device and root port with device\u2019s local timebases without relying on software.\n </p>\n</div>\n"
				}
			}
		},
		"AdvancedFeatureOptionsType": {
			"type": "object",
			"required": [
				"RELOC",
				"SCHEDULER",
				"MULTIBOOT2",
				"ENFORCE_TURNOFF_AC",
				"ENFORCE_TURNOFF_GP",
				"RDT",
				"HYPERV_ENABLED",
				"ACPI_PARSE_ENABLED",
				"L1D_VMENTRY_ENABLED",
				"MCE_ON_PSC_DISABLED"
			],
			"properties": {
				"RELOC": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Hypervisor relocation in memory",
					"description": "<div class=\"document\">\n <p>\n  Enable hypervisor relocation in memory.  The boot loader may need to change the location of the hypervisor because of other firmware.\n </p>\n</div>\n"
				},
				"SCHEDULER": {
					"$ref": "#/definitions/SchedulerType",
					"default": "SCHED_BVT",
					"title": "Scheduler and workload prioritization",
					"description": "<div class=\"document\">\n <p>\n  Choose scheduling algorithm used for determining which User VM runs on a shared virtual CPU.\n </p>\n</div>\n"
				},
				"MULTIBOOT2": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Enable Multiboot2",
					"description": "<div class=\"document\">\n <p>\n  Enable multiboot2 boot protocol support and multiboot1 downward compatibility.  Disable this feature if multiboot1 meets your requirements and to reduce lines of code.\n </p>\n</div>\n"
				},
				"ENFORCE_TURNOFF_AC": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Split lock detection",
					"description": "<div class=\"document\">\n <p>\n  Enable split lock detection for real-time application. This prevents alignment check exceptions from impacting hypervisor real-time performance.\n </p>\n</div>\n"
				},
				"ENFORCE_TURNOFF_GP": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Prevent system bus locking",
					"description": "<div class=\"document\">\n <p>\n  Enable UC lock detection for real-time application. This prevents general protection faults from impacting hypervisor real-time performance.\n </p>\n</div>\n"
				},
				"RDT": {
					"$ref": "#/definitions/RDTType",
					"title": "Intel Resource Director Technology",
					"description": "<div class=\"document\">\n <p>\n  Enable Intel Resource Director Technology (RDT). The technology provides cache and memory allocation features to improve time performance of real-time VMs.\n </p>\n</div>\n"
				},
				"HYPERV_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "TLFS support for Windows",
					"description": "<div class=\"document\">\n <p>\n  Enable Microsoft(R) Hypervisor Top-Level Functional Specification for Windows hyper-v support.\n </p>\n</div>\n"
				},
				"ACPI_PARSE_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Parse ACPI tables at runtime",
					"description": "<div class=\"document\">\n <p>\n  Enable ACPI runtime parsing to get DMAR (DMA remapping) configuration data from the APCI tables. Otherwise, use existing, static information from the associated board.xml file.\n </p>\n</div>\n"
				},
				"L1D_VMENTRY_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Mitigate L1 terminal fault",
					"description": "<div class=\"document\">\n <p>\n  Enable L1 cache flush before VM entry,Determine the enabling of mitigation solution for L1 Terminal Fault (L1TF). The L1 data cache will be flushed before each VMENTRY.L1TF is a speculative execution side channel cache timing vulnerability. Each variety of L1TF could potentially allow unauthorized disclosure of information residing in the L1 data cache.\n </p>\n</div>\n"
				},
				"MCE_ON_PSC_DISABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "MCE workaround",
					"description": "<div class=\"document\">\n <p>\n  Enable software workaround for Machine Check Error on Page Size Change (silicon bug in some processor families).\n </p>\n</div>\n"
				},
				"SSRAM": {
					"$ref": "#/definitions/SSRAMInfo",
					"title": "Software SRAM (for real-time apps)",
					"description": ""
				}
			}
		},
		"AdvancedMemoryOptionsType": {
			"type": "object",
			"required": [
				"STACK_SIZE"
			],
			"properties": {
				"STACK_SIZE": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x2000",
					"title": "Stack size (in byte)",
					"description": "<div class=\"document\">\n <p>\n  Capacity of one stack (in bytes) used by a physical core. Each core uses one stack for normal operation and another three for specific exceptions.\n </p>\n</div>\n"
				}
			}
		},
		"AdvancedCapacitiesOptionsType": {
			"type": "object",
			"required": [
				"MAX_PCI_DEV_NUM",
				"MAX_PT_IRQ_ENTRIES",
				"MAX_MSIX_TABLE_NUM",
				"MAX_EMULATED_MMIO"
			],
			"properties": {
				"MAX_PCI_DEV_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 1024,
					"default": 96,
					"title": "Maximum number of PCI devices",
					"description": "<div class=\"document\">\n <p>\n  Specify the static memory allocation of maximum number of PCI devices. (Default value is 96)\n </p>\n</div>\n"
				},
				"MAX_PT_IRQ_ENTRIES": {
					"type": "integer",
					"default": 256,
					"title": "MAX_PT_IRQ_ENTRIES",
					"description": "<div class=\"document\">\n <p>\n  The pre-defined number of interrupt sources of all pass-through devices.\n </p>\n</div>\n"
				},
				"MAX_MSIX_TABLE_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 2048,
					"default": 64,
					"title": "MAX_MSIX_TABLE_NUM",
					"description": "<div class=\"document\">\n <p>\n  Specify maximum number of MSI-X tables per device. If this value is empty, then the default value will be calculated from the board XML file. (Default value is 64)\n </p>\n</div>\n"
				},
				"MAX_EMULATED_MMIO": {
					"type": "integer",
					"minimum": 1,
					"maximum": 128,
					"default": 16,
					"title": "MAX_EMULATED_MMIO",
					"description": "<div class=\"document\">\n <p>\n  Specify maximum number of emulated MMIO regions. (Default value is 16)\n </p>\n</div>\n"
				}
			}
		},
		"HVAdvancedConfigType": {
			"type": "object",
			"required": [
				"FEATURES",
				"MEMORY",
				"CAPACITIES"
			],
			"properties": {
				"FEATURES": {
					"$ref": "#/definitions/AdvancedFeatureOptionsType",
					"title": "Hypervisor features",
					"description": "<div class=\"document\">\n <p>\n  Enable hypervisor features.\n </p>\n</div>\n"
				},
				"MEMORY": {
					"$ref": "#/definitions/AdvancedMemoryOptionsType",
					"title": "Memory options",
					"description": "<div class=\"document\">\n <p>\n  Configure memory used by the hypervisor.\n </p>\n</div>\n"
				},
				"CAPACITIES": {
					"$ref": "#/definitions/AdvancedCapacitiesOptionsType",
					"title": "Hypervisor capacities",
					"description": "<div class=\"document\">\n <p>\n  Configure the capacities of the hypervisor.\n </p>\n</div>\n"
				}
			}
		}
	}
}