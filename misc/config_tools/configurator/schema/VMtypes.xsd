<?xml version="1.0"?>
<xs:schema xml:id="root"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:acrn="https://projectacrn.org">

    <xs:simpleType name="LoadOrderType">
        <xs:annotation>
            <xs:documentation>Current supported VM types are:

                - ``PRE_LAUNCHED_VM`` pre-launched VM
                - ``SERVICE_VM`` Service VM
                - ``POST_LAUNCHED_VM`` post-launched VM
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="SERVICE_VM"/>
            <xs:enumeration value="PRE_LAUNCHED_VM"/>
            <xs:enumeration value="POST_LAUNCHED_VM"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="VMType">
        <xs:annotation>
            <xs:documentation>Current supported VM types are:

                - ``RTVM`` Read-time VM
                - ``STANDARD_VM`` Service VM
                - ``TEE_VM`` VM with Trusted Execution Environment, which could provide high level
                security of code execution
                - ``REE_VM`` VM with Rich Execution Environment, which is a companion VM with TEE_VM,
                and could provide more features and applications, but is vulnerable to attacks
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="RTVM"/>
            <xs:enumeration value="STANDARD_VM"/>
            <xs:enumeration value="TEE_VM"/>
            <xs:enumeration value="REE_VM"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="CPUAffinityConfiguration">
        <xs:sequence>
            <xs:element name="pcpu_id" type="xs:integer" default="2" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>A pCPU that this VM's vCPU is allowed to pin
                        to.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CLOSConfiguration">
        <xs:sequence>
            <xs:element name="vcpu_clos" type="xs:integer" default="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>By default (``GUEST_FLAG_VCAT_ENABLED`` is not specified):
                        vcpu_clos is per-CPU and it configures each CPU in VMs to a desired CLOS ID in the ``VM``
                        section of the
                        scenario file. Follow :ref:`rdt_detection_capabilities` to identify the maximum supported CLOS
                        ID that can be used.

                        If ``GUEST_FLAG_VCAT_ENABLED`` is specified:
                        vcpu_clos is not per-CPU anymore, just a list of physical CLOSIDs (minimum 2) that are assigned
                        to VMs
                        for vCAT use. Each vcpu_clos will be mapped to a virtual CLOSID, the first vcpu_clos is mapped
                        to virtual
                        CLOSID 0 and the second is mapped to virtual CLOSID 1, etc.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="EPCSection">
        <xs:sequence>
            <xs:element name="base" type="HexFormat" default="0">
                <xs:annotation acrn:applicable-vms="pre-launched">
                    <xs:documentation>Specify SGX EPC section base, must be page aligned. (Default value is 0)
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="size" type="HexFormat" default="0">
                <xs:annotation acrn:applicable-vms="pre-launched">
                    <xs:documentation>Specify SGX EPC section size in Bytes, must be page aligned. (Default value is
                        0)
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="MemoryInfo">
        <xs:all>
            <xs:element name="whole" type="xs:integer" default="256">
                <xs:annotation acrn:title="VM physical memory allocation (MB)" acrn:views="basic"
                               acrn:applicable-vms="post-launched">
                    <xs:documentation>Specify the physical memory allocated to this VM in Megabytes.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="start_hpa" type="HexFormat" default="0x100000000">
                <xs:annotation acrn:views="advanced" acrn:applicable-vms="pre-launched, service-vm">
                    <xs:documentation>The starting physical address in host for the VM.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="size" type="MemorySizeType" default="0x20000000" minOccurs="0">
                <xs:annotation acrn:views="advanced" acrn:applicable-vms="pre-launched, service-vm">
                    <xs:documentation>The memory size in bytes for the VM. Default value is ``0x200000000``.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="start_hpa2" type="HexFormat" default="0x0" minOccurs="0">
                <xs:annotation acrn:views="advanced" acrn:applicable-vms="pre-launched, service-vm">
                    <xs:documentation>Start of second HPA for non-contiguous allocations in host for the VM.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="size_hpa2" type="MemorySizeType" default="0x0" minOccurs="0">
                <xs:annotation acrn:views="advanced" acrn:applicable-vms="pre-launched, service-vm">
                    <xs:documentation>Memory size of second HPA for non-contiguous allocations in Bytes for the VM.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="OSConfigurations">
        <xs:all>
            <xs:element name="kern_type" type="VMKernelType">
                <xs:annotation acrn:title="Kernel image type">
                    <xs:documentation>Specify the kernel image type so the hypervisor can load it correctly.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="kern_mod" type="xs:string">
                <xs:annotation acrn:title="Kernel module tag">
                    <xs:documentation>Enter the tag for the kernel image that is used as a multiboot module. It must
                        exactly match the module tag in the GRUB multiboot cmdline.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="ramdisk_mod" type="xs:string" minOccurs="0">
                <xs:annotation acrn:title="RAMdisk module tag">
                    <xs:documentation>Specify the tag for the ramdisk image that is used as a multiboot module. It must
                        exactly match the module tag in the GRUB multiboot cmdline.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="bootargs" type="xs:string" minOccurs="0">
                <xs:annotation acrn:title="Kernel boot arguments">
                    <xs:documentation>Specify configurable boot argument for pre-launched or Service VM.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:all>
    </xs:complexType>

    <xs:simpleType name="VMKernelType">
        <xs:annotation>
            <xs:documentation>A string with either ``KERNEL_BZIMAGE``, ``KERNEL_ELF`` or
                ``KERNEL_RAWIMAGE``.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="KERNEL_BZIMAGE"/>
            <xs:enumeration value="KERNEL_RAWIMAGE"/>
            <xs:enumeration value="KERNEL_ELF"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="VuartType">
        <xs:annotation>
            <xs:documentation>vCOM type</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="legacy"/>
            <xs:enumeration value="pci"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="VuartEndpointType">
        <xs:sequence>
            <xs:element name="vm_name" type="xs:string"/>
            <xs:element name="io_port" type="HexFormat" default="0x3F"/>
            <xs:element name="vbdf" type="VBDFType" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="VuartConnectionType">
        <xs:sequence>
            <xs:element name="name" type="xs:string"/>
            <xs:element name="type" type="VuartType" default="legacy"/>
            <xs:element name="endpoint" type="VuartEndpointType" minOccurs="2" maxOccurs="2"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="VuartConnectionsType">
        <xs:all>
            <xs:element name="vuart_connection" type="VuartConnectionType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:all>
    </xs:complexType>

    <xs:simpleType name="LegacyVuartType">
        <xs:annotation acrn:configurable="n">
            <xs:documentation>vCOM type</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="VUART_LEGACY_PIO"/>
            <xs:enumeration value="VUART_PCI"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="LegacyVuartBase">
        <xs:annotation>
            <xs:documentation>A string with either ``SERVICE_VM_COM1_BASE``,
                ``SERVICE_VM_COM2_BASE``, ``SERVICE_VM_COM3_BASE``, ``SERVICE_VM_COM4_BASE``,
                ``COM1_BASE``, ``COM2_BASE``, ``COM3_BASE``, ``COM4_BASE``,
                ``CONFIG_COM_BASE``, or indicating it's disabled with ``INVALID_COM_BASE``.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="SERVICE_VM_COM1_BASE"/>
            <xs:enumeration value="SERVICE_VM_COM2_BASE"/>
            <xs:enumeration value="SERVICE_VM_COM3_BASE"/>
            <xs:enumeration value="SERVICE_VM_COM4_BASE"/>
            <xs:enumeration value="COM1_BASE"/>
            <xs:enumeration value="COM2_BASE"/>
            <xs:enumeration value="COM3_BASE"/>
            <xs:enumeration value="COM4_BASE"/>
            <xs:enumeration value="CONFIG_COM_BASE"/>
            <xs:enumeration value="INVALID_COM_BASE"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="LegacyVuartIrq">
        <xs:annotation acrn:configurable="n">
            <xs:documentation>A string with either ``SERVICE_VM_COM1_IRQ``,
                ``SERVICE_VM_COM2_IRQ``, ``SERVICE_VM_COM3_IRQ``, ``SERVICE_VM_COM4_IRQ``,
                ``COM1_IRQ``, ``COM2_IRQ``, ``COM3_IRQ``, ``COM4_IRQ``,
                ``CONFIG_COM_IRQ`` or ``0``. If ``0`` is set, the vuart will
                use polling mode.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="SERVICE_VM_COM1_IRQ"/>
            <xs:enumeration value="SERVICE_VM_COM2_IRQ"/>
            <xs:enumeration value="SERVICE_VM_COM3_IRQ"/>
            <xs:enumeration value="SERVICE_VM_COM4_IRQ"/>
            <xs:enumeration value="COM1_IRQ"/>
            <xs:enumeration value="COM2_IRQ"/>
            <xs:enumeration value="COM3_IRQ"/>
            <xs:enumeration value="COM4_IRQ"/>
            <xs:enumeration value="CONFIG_COM_IRQ"/>
            <xs:enumeration value="0"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="LegacyVuartConfiguration">
        <xs:sequence>
            <xs:element name="type" type="LegacyVuartType" default="VUART_LEGACY_PIO">
                <xs:annotation>
                    <xs:documentation>vUART (COM) type; only legacy PIO mode is
                        supported.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="base" type="LegacyVuartBase">
                <xs:annotation>
                    <xs:documentation>vUART (COM) enabling switch. Enable by exposing its COM_BASE
                        (e.b., ``SERVICE_VM_COM1_BASE`` for Service VM); disable by returning
                        ``INVALID_COM_BASE``.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="irq" type="LegacyVuartIrq">
                <xs:annotation>
                    <xs:documentation>vCOM IRQ.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="target_vm_id" type="xs:integer" default="1" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>COM2 is used for VM communications. When it is enabled, specify which
                        target VM the current VM connects to.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="target_uart_id" type="xs:integer" default="1" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Target vUART ID to which the vCOM2 connects.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:integer" use="required"/>
    </xs:complexType>

    <xs:simpleType name="PCIVuartBase">
        <xs:annotation>
            <xs:documentation>A string with ``PCI_VUART`` or indicating its
                disabled using ``INVALID_PCI_BASE``.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="PCI_VUART"/>
            <xs:enumeration value="INVALID_PCI_BASE"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="ConsoleVuartConfiguration">
        <xs:sequence>
            <xs:element name="base" type="PCIVuartBase" default="INVALID_PCI_BASE">
                <xs:annotation>
                    <xs:documentation>Console vUART (A.K.A PCI based vUART) enabling switch.
                        Enable by specifying PCI_VUART; disable by specifying
                        ``INVALID_PCI_BASE``.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:integer" use="required"/>
    </xs:complexType>

    <xs:complexType name="CommunicationVuartConfiguration">
        <xs:sequence>
            <xs:element name="base" type="PCIVuartBase" default="INVALID_PCI_BASE">
                <xs:annotation>
                    <xs:documentation>Communication vUART (A.K.A PCI based vUART) enabling switch.
                        Enable by specifying PCI_VUART; disable by specifying
                        ``INVALID_PCI_BASE``.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="target_vm_id" type="xs:integer">
                <xs:annotation>
                    <xs:documentation>specify which target VM the current VM connects to.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="target_uart_id" type="xs:integer">
                <xs:annotation>
                    <xs:documentation>Target vUART ID to which the ``communication_vuart`` connects.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:integer" use="required"/>
    </xs:complexType>

    <xs:simpleType name="ConsoleVuartConfigurationType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="None"/>
            <xs:enumeration value="COM Port 1"/>
            <xs:enumeration value="COM Port 2"/>
            <xs:enumeration value="COM Port 3"/>
            <xs:enumeration value="COM Port 4"/>
            <xs:enumeration value="PCI"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="MMIOResourcesConfiguration">
        <xs:sequence>
            <xs:element name="TPM2" type="Boolean" default="n" minOccurs="0">
                <xs:annotation acrn:title="Trusted Platform Module passthrough"
                               acrn:applicable-vms="pre-launched, post-launched">
                    <xs:documentation>Passthrough the Trusted Platform Module (TPM2) device to this VM. (Optional)
                        (Default value is n)
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="p2sb" type="Boolean" default="n" minOccurs="0">
                <xs:annotation acrn:title="Primary-to-Sideband bridge passthrough" acrn:applicable-vms="pre-launched">
                    <xs:documentation>Passthrough the P2SB (Primary-to-Sideband) bridge register access BAR to the this
                        VM. (Optional) (Default value is n)
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="PCIDevsConfiguration">
        <xs:sequence>
            <xs:element name="pci_dev" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation acrn:title="PCI device assignment">
                    <xs:documentation>Select the PCI devices you want to assign to this virtual machine.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="OSType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="Non-Windows OS"/>
            <xs:enumeration value="Windows OS"/>
        </xs:restriction>
    </xs:simpleType>

</xs:schema>
